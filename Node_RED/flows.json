[
    {
        "id": "b0af0ce7369514a3",
        "type": "tab",
        "label": "Data Acquisition",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fe72ad617b9a8a48",
        "type": "tab",
        "label": "Data analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f43a42441b6f63c",
        "type": "tab",
        "label": "Alarms Historic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "999bc0a47d0df7f6",
        "type": "tab",
        "label": "Alarms",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "482bde5f7ef38274",
        "type": "tab",
        "label": "Users Management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f0143a3bde4efa8",
        "type": "group",
        "z": "b0af0ce7369514a3",
        "name": "Get data from ESP8266 via MQTT",
        "style": {
            "label": true
        },
        "nodes": [
            "d71276f4c389b10c",
            "155fd0e456750fa5",
            "eb7e0a26a78ab06a",
            "0ccea1b1d23a277c",
            "d2f1176be2a64f02"
        ],
        "x": 54,
        "y": 39,
        "w": 632,
        "h": 162
    },
    {
        "id": "f8b20ae8640a9fc1",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Enable/Disable overvoltage alarm",
        "style": {
            "label": true
        },
        "nodes": [
            "9beed1aa2194674b",
            "411dc7f38c14a2e4",
            "01aa74f3312d6a52",
            "c497d63524ee58ad",
            "ea12c701471b3a3f",
            "167ef4670e9d9fc1",
            "21ece2c880e16c30",
            "62a4b6779751e9d3",
            "22247cf719379c4c",
            "15bba15c2ec7944c",
            "2c22627b96fd09ca",
            "2dc60a325032678c"
        ],
        "x": 14,
        "y": 359,
        "w": 1032,
        "h": 202
    },
    {
        "id": "eaea5e605a485fbb",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Check alarms",
        "style": {
            "label": true
        },
        "nodes": [
            "a10d6a22eaf41d85",
            "db6f0f0277716231",
            "84d32fe5ee201877",
            "49f987bfacb35dab",
            "c175c8ce19cfd98d",
            "04f0d584c06ab2cf",
            "1de45397763731e3",
            "7433e8168f2576ab",
            "1a1c62b470f46324",
            "6314529a303f7e63",
            "ea7daa7b6dfa439c"
        ],
        "x": 164,
        "y": 1679,
        "w": 982,
        "h": 202
    },
    {
        "id": "b90b2cc6f056d966",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Enable/Disable undervoltage alarm",
        "style": {
            "label": true
        },
        "nodes": [
            "ff79ce1ed4bbfa3c",
            "16632e81b89ee699",
            "758a84efe9a8f665",
            "4d8795e6a4c80cc2",
            "0bcb0ed45c8d2664",
            "54cb53387b06207a",
            "48b89a2cba4efde4",
            "fd32d8e79fe71e0e",
            "c228f0505765199f",
            "3c681ca6b4561a74",
            "9ca28d6980876470",
            "46895f724a52fe88"
        ],
        "x": 14,
        "y": 579,
        "w": 1052,
        "h": 202
    },
    {
        "id": "19e98ffbd0844fc9",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Enable/Disable overcurrent alarm",
        "style": {
            "label": true
        },
        "nodes": [
            "df353a5c39172caf",
            "a88bf7e7ac37823c",
            "646922c8c97bec7f",
            "36377791ae9c719e",
            "f51133c7d7d9e5f4",
            "fed3fcfa987b1b03",
            "c91cdae5cf1fb728",
            "c4bc6f3f7d6b3120",
            "ff454f680eb9e5ac",
            "ff9e91a5d091186f",
            "d4d24181f42a8280",
            "f19fe9df90aa9314"
        ],
        "x": 14,
        "y": 799,
        "w": 1032,
        "h": 202
    },
    {
        "id": "b6295e28d8b86c52",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Enable/Disable overconsumption alarm",
        "style": {
            "label": true
        },
        "nodes": [
            "52111ee3d62b7569",
            "c3aeb147bf96a227",
            "053e8743baec8a94",
            "1760f6cd248976d5",
            "3d00bddfcd6a745c",
            "87692cc1b3629f22",
            "3e522c8921c0ee58",
            "67ea2498effaed84",
            "e69e6066980b15e7",
            "d344d82b093adf16",
            "0cd17987b9c70caf",
            "70bbde10e4faa7d9"
        ],
        "x": 14,
        "y": 1019,
        "w": 1052,
        "h": 202
    },
    {
        "id": "2fbd0fbd8f990790",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Set threshold values",
        "style": {
            "label": true
        },
        "nodes": [
            "6fc32d3239ab4da3",
            "0426487f4ccf5b18",
            "07b95302d95ea1ba",
            "e1e9d493f4a18e24",
            "c7336fa80764f71c",
            "4e8b176d29e77ba5",
            "e17627c9227f928e",
            "9638751ead0f8f73",
            "dbcc77638fa8f7ff",
            "148199254e0cc55e",
            "fddb374c7fe31434",
            "2559e8c84910d219",
            "1850ef5565c7435a",
            "f5153970f7d46048"
        ],
        "x": 14,
        "y": 1259,
        "w": 742,
        "h": 362
    },
    {
        "id": "c9065a9ed0d57479",
        "type": "group",
        "z": "b0af0ce7369514a3",
        "name": "Graph data",
        "style": {
            "label": true
        },
        "nodes": [
            "f1d0ac2160939dc9",
            "7f7ee486550e364a",
            "8745157f0f289caf",
            "d29e6989bec42e21",
            "c3301738deb4e1f1",
            "3d684a97b057f51d",
            "2262f67bcda5aa03",
            "db768e2b48edeb48",
            "3a38a347c1c97115",
            "fe735c7e72db98ec",
            "40a1371555cfd25e",
            "096b1813f91ac182",
            "c33526511ce0d8f6",
            "1a8d07e822bffc9c",
            "171a29cb9395adb8"
        ],
        "x": 54,
        "y": 239,
        "w": 572,
        "h": 322
    },
    {
        "id": "b191d481f7cd8b4a",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Send Email",
        "style": {
            "label": true
        },
        "nodes": [
            "473a76b058a905f6",
            "2b9c257870e2496e",
            "b64aeb96ae8f9fd2",
            "c8cf8966b029e018",
            "5ad943333ba368e8",
            "6e65b0533267aac0"
        ],
        "x": 14,
        "y": 2259,
        "w": 932,
        "h": 82
    },
    {
        "id": "1102123cbc3891e1",
        "type": "group",
        "z": "482bde5f7ef38274",
        "name": "Add new user",
        "style": {
            "label": true
        },
        "nodes": [
            "273322c83865bde6",
            "7f7414539189a065",
            "3a20b3bd99f04d16"
        ],
        "x": 34,
        "y": 159,
        "w": 422,
        "h": 82
    },
    {
        "id": "2c8eda0455efa68b",
        "type": "group",
        "z": "482bde5f7ef38274",
        "name": "Update Table",
        "style": {
            "label": true
        },
        "nodes": [
            "59f358c717560f2f",
            "df6489f2db26559e",
            "c023858f7988e11b",
            "b08f8b26dea3da57"
        ],
        "x": 34,
        "y": 39,
        "w": 522,
        "h": 82
    },
    {
        "id": "372d6a6ba94b0d06",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Update alarms states",
        "style": {
            "label": true
        },
        "nodes": [
            "d35f9e07f9b786bf",
            "13f41426b533b5e0",
            "adcfde493a44c574"
        ],
        "x": 1174,
        "y": 759,
        "w": 402,
        "h": 82
    },
    {
        "id": "1d5a30a49e64d027",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Get alarm settings from DB",
        "style": {
            "label": true
        },
        "nodes": [
            "a7d3afeeaa62f101",
            "a7166432024eefbd",
            "63444506723e8328",
            "71799f604656576d",
            "4688cb13219dbd40",
            "a4b2bc47e8e0af15",
            "d2d00b980929e9bc",
            "9d16cffe2c80db08",
            "3b85289612278ea2",
            "18a752b213e2dd5e",
            "b2e18e49460b8ac6",
            "5bbaa5c1f913bf1b",
            "54d1cee1061e74a1",
            "ac9070e265e95f8b",
            "743c83d183a56b65"
        ],
        "x": 14,
        "y": 19,
        "w": 922,
        "h": 282
    },
    {
        "id": "036f68430478cdae",
        "type": "group",
        "z": "482bde5f7ef38274",
        "name": "Show users table",
        "style": {
            "label": true
        },
        "nodes": [
            "c8625d2a5063386f",
            "7a5ef607bed59be3",
            "906e5e947ee38712",
            "bff8ddaba624602b",
            "e9d0bf6fe6b4e4b8",
            "9330c1a537b1162c",
            "18a6aa9eb50aefd9",
            "29e33daa3fb5df8d"
        ],
        "x": 34,
        "y": 279,
        "w": 862,
        "h": 122
    },
    {
        "id": "d88b4db3501fe487",
        "type": "group",
        "z": "482bde5f7ef38274",
        "name": "Delete user",
        "style": {
            "label": true
        },
        "nodes": [
            "8a837eb8e1da3067",
            "cb7a58acec2c1a7c",
            "8c45e33dabc0b9d0",
            "229644ec547cba8b",
            "1ebec28e7a36f619"
        ],
        "x": 34,
        "y": 439,
        "w": 682,
        "h": 82
    },
    {
        "id": "8951563d9636cbc7",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Alarms cooldown configuration",
        "style": {
            "label": true
        },
        "nodes": [
            "3cb950e6de8d7af7",
            "cb11038b5e13ec62",
            "e69b68ce76a467cd",
            "178df268cb435b9a",
            "3fab71b4ace5efcc"
        ],
        "x": 14,
        "y": 1939,
        "w": 872,
        "h": 122
    },
    {
        "id": "17df376e8b411382",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Overconsumption alarm time ths configuration",
        "style": {
            "label": true
        },
        "nodes": [
            "39262c5f0ed362c6",
            "193d85ec0623b985",
            "a03a27bf7979cb5d",
            "d5f7e3f3a739697f",
            "efdf2c1c43cf7345"
        ],
        "x": 14,
        "y": 2079,
        "w": 992,
        "h": 122
    },
    {
        "id": "4aeb419092df88b3",
        "type": "group",
        "z": "1f43a42441b6f63c",
        "name": "Alarm historic settings",
        "style": {
            "label": true
        },
        "nodes": [
            "275500053bf46980",
            "1999f6ed94cc5654",
            "437b0fafb4ee7953",
            "8ad5126ea098aa6b",
            "d48e44cf902f9555",
            "ed4bf82fbaebbc6a",
            "062fe62dd1be1beb",
            "b03ba45cdfbfdbf5",
            "bd1d730eeead1b13",
            "eae5919fba2cb6c2"
        ],
        "x": 34,
        "y": 59,
        "w": 872,
        "h": 182
    },
    {
        "id": "19bed9717ceed5e0",
        "type": "group",
        "z": "fe72ad617b9a8a48",
        "name": "Settings",
        "style": {
            "label": true
        },
        "nodes": [
            "29265d16b4d1ef7d",
            "21fc9c5c0d93d48b",
            "b09c53d8e8e34330",
            "086345c8caa02802",
            "0e008285bccde37a",
            "ee0e8c720ae13081",
            "6dfab8a6a3a6c087",
            "f23c2373e4ca2561",
            "42ee1d734ecf2e9a",
            "e6fc68df2400440f",
            "40140164cf3ad288"
        ],
        "x": 34,
        "y": 39,
        "w": 872,
        "h": 242
    },
    {
        "id": "c36b78434a89a02c",
        "type": "group",
        "z": "fe72ad617b9a8a48",
        "name": "Show consumption",
        "style": {
            "label": true
        },
        "nodes": [
            "4142ce0932eab763",
            "9adc59faa7bafbdb",
            "206a6ce39c43d7a6",
            "7ffde4ec1de83e8f",
            "cfd134107c7ca061",
            "30b7690e880e4770",
            "3401b32d0ef7043a"
        ],
        "x": 34,
        "y": 339,
        "w": 952,
        "h": 222
    },
    {
        "id": "ed44ad4eca26127a",
        "type": "group",
        "z": "1f43a42441b6f63c",
        "name": "Alarm historic table",
        "style": {
            "label": true
        },
        "nodes": [
            "f0a4f6fb14284a77",
            "5bdee2bf7accab06",
            "ca20930cea3a7794",
            "7b5c32ee96921408",
            "fdb140d30ed5aac8"
        ],
        "x": 34,
        "y": 279,
        "w": 772,
        "h": 122
    },
    {
        "id": "df0c622be2e676ce",
        "type": "group",
        "z": "b0af0ce7369514a3",
        "name": "Save data config",
        "style": {
            "label": true
        },
        "nodes": [
            "fe99c810687ce07b",
            "5d4348e7edaedde4",
            "8aec68e389086744"
        ],
        "x": 734,
        "y": 39,
        "w": 412,
        "h": 122
    },
    {
        "id": "677412c45c1cb68c",
        "type": "group",
        "z": "b0af0ce7369514a3",
        "name": "System Status",
        "style": {
            "label": true
        },
        "nodes": [
            "53522f53f48f9aa8",
            "530196314247f54e",
            "b40425d6d081f9a0"
        ],
        "x": 54,
        "y": 599,
        "w": 552,
        "h": 82
    },
    {
        "id": "9996a8587542bcf9",
        "type": "group",
        "z": "999bc0a47d0df7f6",
        "name": "Save data in DB",
        "style": {
            "label": true
        },
        "nodes": [
            "0e790badd828e6a0",
            "98a6df06f042dc23"
        ],
        "x": 844,
        "y": 1379,
        "w": 262,
        "h": 82
    },
    {
        "id": "56370940d96f10de",
        "type": "mqtt-broker",
        "name": "Mosquitto Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ea8df98f6d598fb3",
        "type": "mqtt-broker",
        "name": "currentRMS",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2da3fa7dd95ff419",
        "type": "mqtt-broker",
        "name": "activePower",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e8189595b0e77054",
        "type": "mqtt-broker",
        "name": "activeEnergy",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "aab6ec07b47e0ee1",
        "type": "mqtt-broker",
        "name": "powerFactor",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e55b5dfb4584041e",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Energy Meter Monitoring Panel",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "bf84fbcf15edd73e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "102f2b0868c8e818",
        "type": "sqlitedb",
        "db": "/home/pi/EnergyMeter/energyMeter.db",
        "mode": "RW"
    },
    {
        "id": "147ac8b566301e6c",
        "type": "ui_tab",
        "name": "Users",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c8c4bf21adf2105",
        "type": "ui_group",
        "name": "User List",
        "tab": "147ac8b566301e6c",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7e42e3890f16c7cb",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "06bb1ecfe875d51e",
        "type": "ui_tab",
        "name": "Alarm Historic",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bbd948ee4eae4c1f",
        "type": "ui_group",
        "name": "Settings",
        "tab": "06bb1ecfe875d51e",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3999f441ae228e70",
        "type": "ui_group",
        "name": "Charts",
        "tab": "bf84fbcf15edd73e",
        "order": 6,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c0014e95575a695d",
        "type": "ui_tab",
        "name": "Energy",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c658951498713792",
        "type": "ui_group",
        "name": "Settings",
        "tab": "c0014e95575a695d",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b56f97102bf0afad",
        "type": "ui_group",
        "name": "Enable/Disable",
        "tab": "7e42e3890f16c7cb",
        "order": 1,
        "disp": false,
        "width": 17,
        "collapse": false,
        "className": ""
    },
    {
        "id": "39050940b9ad40f4",
        "type": "ui_group",
        "name": "Time Threshold",
        "tab": "7e42e3890f16c7cb",
        "order": 2,
        "disp": false,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3b615f52c05d9ff0",
        "type": "ui_group",
        "name": "Energy Consumption [kWh]",
        "tab": "c0014e95575a695d",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f1fa4b428c2f1cf0",
        "type": "ui_group",
        "name": "Alarm Historic",
        "tab": "06bb1ecfe875d51e",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "23dd2c25a12ff010",
        "type": "ui_group",
        "name": "Add New User",
        "tab": "147ac8b566301e6c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a5efa5edc0719406",
        "type": "ui_group",
        "name": "General Configuration",
        "tab": "7e42e3890f16c7cb",
        "order": 3,
        "disp": false,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "613a20e97a607c52",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "ba53f8a2287cf871",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "7b82699aff84bb7d",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "c046e4cc0d62108b",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "3563f5c30c364bda",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "455528e12b726795",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "74d2d87bad584def",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 10,
        "width": 6,
        "height": 1
    },
    {
        "id": "b3ecc7ac1ea5ecd8",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 11,
        "width": 6,
        "height": 1
    },
    {
        "id": "44a83193b1eec1f3",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 12,
        "width": 6,
        "height": 1
    },
    {
        "id": "e1fe767a50e2ccbd",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 13,
        "width": 6,
        "height": 1
    },
    {
        "id": "934353877a366ad8",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 14,
        "width": 6,
        "height": 1
    },
    {
        "id": "d9377b05f7ea93de",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 15,
        "width": 2,
        "height": 1
    },
    {
        "id": "e620d4d35f222229",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 17,
        "width": 6,
        "height": 1
    },
    {
        "id": "83ef1506916af715",
        "type": "ui_spacer",
        "z": "b0af0ce7369514a3",
        "name": "spacer",
        "group": "3999f441ae228e70",
        "order": 18,
        "width": 2,
        "height": 1
    },
    {
        "id": "856c53a782055833",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "27c9fc41ee18cd81",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "565a1debc7b30066",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "0fe280512eb0c27e",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "07ec0c60c9a38222",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 15,
        "width": 17,
        "height": 1
    },
    {
        "id": "87b4b4f16e3f8c05",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 17,
        "width": 3,
        "height": 1
    },
    {
        "id": "799ec68b3118fd15",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "fa15dc3d0e90f16f",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "2d51a5d1db2b656f",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "b56f97102bf0afad",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "c99f34e86a9a75cb",
        "type": "ui_spacer",
        "z": "999bc0a47d0df7f6",
        "name": "spacer",
        "group": "39050940b9ad40f4",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "f1d0ac2160939dc9",
        "type": "ui_chart",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Voltage RMS Chart",
        "group": "3999f441ae228e70",
        "order": 1,
        "width": 12,
        "height": 7,
        "label": "Voltage RMS [V]",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 490,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7f7ee486550e364a",
        "type": "ui_chart",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Current RMS Chart",
        "group": "3999f441ae228e70",
        "order": 2,
        "width": 12,
        "height": 7,
        "label": "Current RMS [A]",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 490,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8745157f0f289caf",
        "type": "ui_chart",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Active Power Chart",
        "group": "3999f441ae228e70",
        "order": 4,
        "width": 12,
        "height": 7,
        "label": "Active Power [W]",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 490,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d71276f4c389b10c",
        "type": "mqtt in",
        "z": "b0af0ce7369514a3",
        "g": "6f0143a3bde4efa8",
        "name": "Mosquitto Broker",
        "topic": "energyMeter",
        "qos": "2",
        "datatype": "utf8",
        "broker": "56370940d96f10de",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "155fd0e456750fa5"
            ]
        ]
    },
    {
        "id": "d29e6989bec42e21",
        "type": "ui_chart",
        "z": "b0af0ce7369514a3",
        "d": true,
        "g": "c9065a9ed0d57479",
        "name": "Active Energy Chart",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Energy [Wh]",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 500,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c3301738deb4e1f1",
        "type": "ui_chart",
        "z": "b0af0ce7369514a3",
        "d": true,
        "g": "c9065a9ed0d57479",
        "name": "Power Factor Chart",
        "group": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Power Factor",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 490,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "155fd0e456750fa5",
        "type": "function",
        "z": "b0af0ce7369514a3",
        "g": "6f0143a3bde4efa8",
        "name": "parseData",
        "func": "// Update the timestamp for next check\nconst now = Date.now();\nglobal.set(\"lastMessageTime\", now);\n\n// Obtener el payload (el mensaje completo en este caso)\nvar data = msg.payload;\n\n// Separar la cadena por el delimitador '|'\nvar values = data.split('|');\n\n// Asignar cada valor a una propiedad diferente\nmsg.datetime = values[0]; \nmsg.voltage = parseFloat(values[1]); \nmsg.current = parseFloat(values[2]); \nmsg.active_power = parseFloat(values[3]); \nmsg.active_energy = parseFloat(values[4]); \nmsg.power_factor = parseFloat(values[5]); \n\n// Devolver el mensaje con los valores individuales\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "eb7e0a26a78ab06a",
                "0ccea1b1d23a277c"
            ]
        ]
    },
    {
        "id": "eb7e0a26a78ab06a",
        "type": "link out",
        "z": "b0af0ce7369514a3",
        "g": "6f0143a3bde4efa8",
        "name": "MQTT Data",
        "mode": "link",
        "links": [
            "3d684a97b057f51d",
            "2262f67bcda5aa03",
            "db768e2b48edeb48",
            "3a38a347c1c97115",
            "40a1371555cfd25e",
            "04f0d584c06ab2cf"
        ],
        "x": 555,
        "y": 80,
        "wires": []
    },
    {
        "id": "3d684a97b057f51d",
        "type": "link in",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "MQTT Data",
        "links": [
            "eb7e0a26a78ab06a"
        ],
        "x": 95,
        "y": 280,
        "wires": [
            [
                "c33526511ce0d8f6"
            ]
        ]
    },
    {
        "id": "2262f67bcda5aa03",
        "type": "link in",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "MQTT Data",
        "links": [
            "eb7e0a26a78ab06a"
        ],
        "x": 95,
        "y": 340,
        "wires": [
            [
                "1a8d07e822bffc9c"
            ]
        ]
    },
    {
        "id": "db768e2b48edeb48",
        "type": "link in",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "MQTT Data",
        "links": [
            "eb7e0a26a78ab06a"
        ],
        "x": 95,
        "y": 400,
        "wires": [
            [
                "171a29cb9395adb8"
            ]
        ]
    },
    {
        "id": "3a38a347c1c97115",
        "type": "link in",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "MQTT Data",
        "links": [
            "eb7e0a26a78ab06a"
        ],
        "x": 95,
        "y": 460,
        "wires": [
            [
                "fe735c7e72db98ec"
            ]
        ]
    },
    {
        "id": "fe735c7e72db98ec",
        "type": "change",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Active Energy",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "active_energy",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Active Energy",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 460,
        "wires": [
            [
                "d29e6989bec42e21"
            ]
        ]
    },
    {
        "id": "40a1371555cfd25e",
        "type": "link in",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "MQTT Data",
        "links": [
            "eb7e0a26a78ab06a"
        ],
        "x": 95,
        "y": 520,
        "wires": [
            [
                "096b1813f91ac182"
            ]
        ]
    },
    {
        "id": "096b1813f91ac182",
        "type": "change",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Power Factor",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "power_factor",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Power Factor",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 520,
        "wires": [
            [
                "c3301738deb4e1f1"
            ]
        ]
    },
    {
        "id": "fe99c810687ce07b",
        "type": "ui_numeric",
        "z": "b0af0ce7369514a3",
        "g": "df0c622be2e676ce",
        "name": "Save Data THS",
        "label": "[minutes]",
        "tooltip": "",
        "group": "a5efa5edc0719406",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1",
        "max": "30",
        "step": 1,
        "className": "",
        "x": 840,
        "y": 120,
        "wires": [
            [
                "8aec68e389086744"
            ]
        ]
    },
    {
        "id": "5d4348e7edaedde4",
        "type": "ui_text",
        "z": "b0af0ce7369514a3",
        "g": "df0c622be2e676ce",
        "group": "a5efa5edc0719406",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Save data every",
        "label": "",
        "format": "Save data every:",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 80,
        "wires": []
    },
    {
        "id": "0ccea1b1d23a277c",
        "type": "function",
        "z": "b0af0ce7369514a3",
        "g": "6f0143a3bde4efa8",
        "name": "Insert data into DB",
        "func": "const datetime = new Date(msg.datetime).getTime();\n\nconst saveInterval = (global.get(\"save_interval\") * 60 * 1000) || (1 * 60 * 1000); // default 1 minutes\nconst lastInsert = global.get(\"lastInsert\") || 0;\n\nlet timeDiff = datetime - lastInsert;\n\n// Check if interval has passed\nif ((datetime - lastInsert) >= saveInterval) {\n    global.set(\"lastInsert\", datetime); // update timestamp\n    msg.topic = `\n        INSERT INTO db_raw_data(\n            datetime, \n            voltage_rms, \n            current_rms, \n            active_power, \n            active_energy, \n            power_factor) \n        VALUES (\n            '${msg.datetime}', \n            '${msg.voltage}', \n            ${msg.current}, \n            ${msg.active_power}, \n            ${msg.active_energy}, \n            ${msg.power_factor})\n        `;\n    return msg;\n} else {\n    return null; // do not insert yet\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "d2f1176be2a64f02"
            ]
        ]
    },
    {
        "id": "8aec68e389086744",
        "type": "change",
        "z": "b0af0ce7369514a3",
        "g": "df0c622be2e676ce",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "save_interval",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "53522f53f48f9aa8",
        "type": "ui_led",
        "z": "b0af0ce7369514a3",
        "g": "677412c45c1cb68c",
        "order": 16,
        "group": "3999f441ae228e70",
        "width": "4",
        "height": "2",
        "label": "Status",
        "labelPlacement": "left",
        "labelAlignment": "right",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "inactive",
                "valueType": "str"
            },
            {
                "color": "#008000",
                "value": "active",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "System Status",
        "x": 500,
        "y": 640,
        "wires": []
    },
    {
        "id": "530196314247f54e",
        "type": "inject",
        "z": "b0af0ce7369514a3",
        "g": "677412c45c1cb68c",
        "name": "Every 1 min",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "b40425d6d081f9a0"
            ]
        ]
    },
    {
        "id": "b40425d6d081f9a0",
        "type": "function",
        "z": "b0af0ce7369514a3",
        "g": "677412c45c1cb68c",
        "name": "Check Status",
        "func": "const lastMessage = global.get(\"lastMessageTime\") || 0;\nconst now = Date.now();\n\n// Check if more than 1 minute has passed since last message\nif ((now - lastMessage) > 60 * 1000) {\n    msg.payload = \"inactive\";\n} else {\n    msg.payload = \"active\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "53522f53f48f9aa8"
            ]
        ]
    },
    {
        "id": "c33526511ce0d8f6",
        "type": "function",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Voltage RMS chart data",
        "func": "let messages = [];\n\nmessages.push({\n    topic: \"Overvoltage THS\",\n    payload: global.get(\"overvoltage_alarm\") ? global.get(\"overvoltage_ths\") : null\n});\n\nmessages.push({\n    topic: \"Undervoltage THS\",\n    payload: global.get(\"undervoltage_alarm\") ? global.get(\"undervoltage_ths\") : null\n});\n\nmessages.push({\n    topic: \"Voltage RMS\",\n    payload: msg.voltage\n});\n\nreturn [[...messages]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "f1d0ac2160939dc9"
            ]
        ]
    },
    {
        "id": "1a8d07e822bffc9c",
        "type": "function",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Current RMS chart data",
        "func": "let messages = [];\n\nmessages.push({\n    topic: \"Overcurrent THS\",\n    payload: global.get(\"overcurrent_alarm\") ? global.get(\"overcurrent_ths\") : null\n});\n\nmessages.push({\n    topic: \"Current RMS\",\n    payload: msg.current,\n});\n\nreturn [[...messages]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 340,
        "wires": [
            [
                "7f7ee486550e364a"
            ]
        ]
    },
    {
        "id": "171a29cb9395adb8",
        "type": "function",
        "z": "b0af0ce7369514a3",
        "g": "c9065a9ed0d57479",
        "name": "Active power chart data",
        "func": "let messages = [];\n\nmessages.push({\n    topic: \"Overconsumption THS\",\n    payload: global.get(\"overconsumption_alarm\") ? global.get(\"overconsumption_ths\") : null\n});\n\nmessages.push({\n    topic: \"Active Power\",\n    payload: msg.active_power,\n});\n\nreturn [[...messages]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "8745157f0f289caf"
            ]
        ]
    },
    {
        "id": "d2f1176be2a64f02",
        "type": "sqlite",
        "z": "b0af0ce7369514a3",
        "g": "6f0143a3bde4efa8",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 580,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "29265d16b4d1ef7d",
        "type": "ui_dropdown",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "",
        "label": "Time Frame",
        "tooltip": "",
        "place": "Select option",
        "group": "c658951498713792",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Day",
                "value": "day",
                "type": "str"
            },
            {
                "label": "Week",
                "value": "week",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "b09c53d8e8e34330"
            ]
        ]
    },
    {
        "id": "21fc9c5c0d93d48b",
        "type": "ui_date_picker",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "",
        "label": "Start",
        "group": "c658951498713792",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 590,
        "y": 140,
        "wires": [
            [
                "42ee1d734ecf2e9a"
            ]
        ]
    },
    {
        "id": "b09c53d8e8e34330",
        "type": "change",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "time_frame",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "086345c8caa02802",
        "type": "ui_button",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Update data",
        "group": "c658951498713792",
        "order": 2,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "ee0e8c720ae13081"
            ]
        ]
    },
    {
        "id": "0e008285bccde37a",
        "type": "sqlite",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 780,
        "y": 200,
        "wires": [
            [
                "cfd134107c7ca061"
            ]
        ]
    },
    {
        "id": "ee0e8c720ae13081",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Data query",
        "func": "const startDateRaw = flow.get(\"start_date\");  // \"08/06/2025, 01:46:06\"\nconst timeFrame = flow.get(\"time_frame\") || \"day\";\n\n// Parse \"DD/MM/YYYY, HH:mm:ss\"\nfunction parseCustomDate(str) {\n    const [datePart, timePart] = str.split(', ');\n    const [day, month, year] = datePart.split('/').map(Number);\n    const [hours, minutes, seconds] = timePart.split(':').map(Number);\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n}\n\n// Format date to \"YYYY-MM-DD HH:mm:ss\"\nfunction toSQLDatetime(date) {\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n}\n\nconst startTime = parseCustomDate(startDateRaw);\nstartTime.setHours(0, 0, 0, 0);\n\nlet endTime = new Date(startTime);\n\nswitch (timeFrame) {\n    case \"day\":\n        endTime.setHours(23, 59, 59, 999);\n        break;\n    case \"week\":\n        endTime.setDate(endTime.getDate() + 6);\n        endTime.setHours(23, 59, 59, 999);\n        break;\n    default:\n        node.error(\"Unknown time frame: \" + timeFrame);\n        return null;\n}\n\nconst startStr = toSQLDatetime(startTime);\nconst endStr = toSQLDatetime(endTime);\n\nmsg.topic = `\n    SELECT datetime, active_energy\n    FROM db_raw_data\n    WHERE datetime BETWEEN '${startStr}' AND '${endStr}'\n    ORDER BY datetime ASC\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "0e008285bccde37a"
            ]
        ]
    },
    {
        "id": "4142ce0932eab763",
        "type": "switch",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "name": "Swith time frame",
        "property": "time_frame",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "day",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "week",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 420,
        "wires": [
            [
                "9adc59faa7bafbdb"
            ],
            [
                "7ffde4ec1de83e8f"
            ]
        ]
    },
    {
        "id": "9adc59faa7bafbdb",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "name": "Hourly Consumption",
        "func": "// Clear chart\nlet clearMsg = {\n    payload: [],\n    topic: \"\"\n};\n\n// Step 1: Initialize a map of 24 hours with default value 0\nlet hourlyData = {};\nfor (let i = 0; i < 24; i++) {\n    hourlyData[i.toString()] = 0;\n}\n\n// Step 2: Update values from incoming payload\nmsg.payload.forEach(item => {\n    hourlyData[item.label] = item.value;\n});\n\n// Step 3: Build an array of messages\nlet messages = [];\nfor (let i = 0; i < 24; i++) {\n    messages.push({\n        topic: i.toString(),\n        payload: hourlyData[i.toString()],\n    });\n}\n\n// Step 4: Return all as individual messages\nreturn [[clearMsg, ...messages]];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 380,
        "wires": [
            [
                "206a6ce39c43d7a6"
            ]
        ]
    },
    {
        "id": "206a6ce39c43d7a6",
        "type": "ui_chart",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "name": "Energy Consumption",
        "group": "3b615f52c05d9ff0",
        "order": 1,
        "width": 16,
        "height": 10,
        "label": "",
        "chartType": "bar",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 860,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7ffde4ec1de83e8f",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "name": "Daily Consumption",
        "func": "// Clear chart\nlet clearMsg = {\n    payload: [],\n    topic: \"\"\n};\n\nlet startDateStr = flow.get(\"start_date\"); // e.g. \"15/06/2025, 21:49:53\"\n\n// Extract date part and split by '/'\nlet dateOnly = startDateStr.split(',')[0].trim(); // \"15/06/2025\"\nlet parts = dateOnly.split('/');\n\n// Rearrange to YYYY, MM, DD\nlet day = parseInt(parts[0], 10);\nlet month = parseInt(parts[1], 10) - 1; // JavaScript months are 0-based\nlet year = parseInt(parts[2], 10);\n\nlet startDate = new Date(year, month, day);\n\n// Step 1: Build 7-day map starting from startDate\nlet dailyData = {};\nfor (let i = 0; i < 7; i++) {\n    let d = new Date(startDate);\n    d.setDate(d.getDate() + i);\n    let dateStr = d.toISOString().split('T')[0]; // YYYY-MM-DD\n    dailyData[dateStr] = 0;\n}\n\n// Step 2: Fill in known values from msg.payload\nmsg.payload.forEach(item => {\n    if (dailyData.hasOwnProperty(item.label)) {\n        dailyData[item.label] = item.value;\n    }\n});\n\n// Step 3: Create output messages\nlet messages = [];\nfor (let date in dailyData) {\n    messages.push({\n        topic: date,\n        payload: dailyData[date]\n    });\n}\n\nreturn [[clearMsg, ...messages]];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 460,
        "wires": [
            [
                "206a6ce39c43d7a6"
            ]
        ]
    },
    {
        "id": "6dfab8a6a3a6c087",
        "type": "inject",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Load Today's Graph",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "ee0e8c720ae13081"
            ]
        ]
    },
    {
        "id": "cfd134107c7ca061",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "name": "Process data",
        "func": "const timeFrame = flow.get(\"time_frame\");\nconst results = msg.payload;\n\nlet lastEnergy = null;\nlet lastTime = null;\nlet consumption = {};\n\nfunction formatDateLocal(date) {\n    let y = date.getFullYear();\n    let m = (date.getMonth() + 1).toString().padStart(2, '0');\n    let d = date.getDate().toString().padStart(2, '0');\n    return `${y}-${m}-${d}`;\n}\n\nfunction getKey(date) {\n    const d = new Date(date);\n    switch (timeFrame) {\n        case \"day\":\n            return d.getHours(); // 0-23\n        case \"week\":\n            return formatDateLocal(d);\n    }\n}\n\nfor (const row of results) {\n    const currentEnergy = row.active_energy;\n    const currentTime = row.datetime;\n\n    if (lastEnergy !== null && currentEnergy >= lastEnergy) {\n        const delta = currentEnergy - lastEnergy;\n        const key = getKey(currentTime);\n        consumption[key] = (consumption[key] || 0) + delta;\n    }\n\n    lastEnergy = currentEnergy;\n    lastTime = currentTime;\n}\n\n// Convert to array for chart\nmsg.payload = Object.entries(consumption).map(([label, value]) => ({\n    label,\n    value\n}));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 420,
        "wires": [
            [
                "4142ce0932eab763",
                "3401b32d0ef7043a"
            ]
        ]
    },
    {
        "id": "f23c2373e4ca2561",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Now (GTM-3)",
        "func": "let now = new Date();\n\n// Create a new Date adjusted to GMT-3\nlet gmt3Time = new Date(now.getTime() - 3 * 60 * 60 * 1000);\n\n// Extract components in UTC (since we shifted manually)\nlet yyyy = gmt3Time.getUTCFullYear();\nlet mm = String(gmt3Time.getUTCMonth() + 1).padStart(2, '0');\nlet dd = String(gmt3Time.getUTCDate()).padStart(2, '0');\nlet hh = String(gmt3Time.getUTCHours()).padStart(2, '0');\nlet min = String(gmt3Time.getUTCMinutes()).padStart(2, '0');\nlet ss = String(gmt3Time.getUTCSeconds()).padStart(2, '0');\nlet ms = String(gmt3Time.getUTCMilliseconds()).padStart(3, '0');\n\n// Build ISO-like string with fixed GMT-3 offset (no 'Z' because it's not UTC)\nmsg.payload = `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}.${ms}-03:00`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "21fc9c5c0d93d48b"
            ]
        ]
    },
    {
        "id": "42ee1d734ecf2e9a",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Format GTM-3",
        "func": "// Get the timestamp from the incoming message\nlet timestamp = msg.payload;\n\n// Convert to Date object\nlet date = new Date(timestamp);\n\n// Alternatively, use local string:\nlet localString = date.toLocaleString(); // e.g., \"6/8/2025, 2:30:00 PM\"\n\nflow.set(\"start_date\", localString);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e6fc68df2400440f",
        "type": "inject",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Update",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "f23c2373e4ca2561"
            ]
        ]
    },
    {
        "id": "40140164cf3ad288",
        "type": "inject",
        "z": "fe72ad617b9a8a48",
        "g": "19bed9717ceed5e0",
        "name": "Update",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "day",
        "payloadType": "str",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "29265d16b4d1ef7d"
            ]
        ]
    },
    {
        "id": "30b7690e880e4770",
        "type": "ui_template",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "group": "3b615f52c05d9ff0",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<p style=\"text-align: center; margin-top: -5px;\">{{msg.timeframe}}</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3401b32d0ef7043a",
        "type": "function",
        "z": "fe72ad617b9a8a48",
        "g": "c36b78434a89a02c",
        "name": "Graph X-axis label",
        "func": "const startDateRaw = flow.get(\"start_date\"); \nconst timeFrame = flow.get(\"time_frame\") || \"day\";\n\n// Parse \"DD/MM/YYYY, HH:mm:ss\"\nfunction parseCustomDate(str) {\n    const [datePart, timePart] = str.split(', ');\n    const [day, month, year] = datePart.split('/').map(Number);\n    const [hours, minutes, seconds] = timePart.split(':').map(Number);\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n}\n\n// Parse the date\nlet date = parseCustomDate(startDateRaw);\n\n// Create label\nlet label = \"\";\nif (timeFrame === \"day\") {\n    label = \"Data for \" + date.toLocaleDateString(\"en-US\", {month: \"long\", day: \"numeric\"}); // e.g., \"Data for June 14\"\n} else if (timeFrame === \"week\") {\n    let end = new Date(date);\n    end.setDate(date.getDate() + 6);\n    let startStr = date.toLocaleDateString(\"en-US\", {month: \"long\", day: \"numeric\"});\n    let endStr = end.toLocaleDateString(\"en-US\", {month: \"long\", day: \"numeric\"});\n    label = `Data from ${startStr} to ${endStr}`; // e.g., \"Data from June 10 to June 16\"\n}\n\nmsg.timeframe = label;\nreturn msg;\n\ntimeFrame == \"day\" ? msg.timeframe = \"Hour\" : msg.timeframe = \"Day\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 520,
        "wires": [
            [
                "30b7690e880e4770"
            ]
        ]
    },
    {
        "id": "275500053bf46980",
        "type": "ui_date_picker",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "Start date",
        "label": "Start",
        "group": "bbd948ee4eae4c1f",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 560,
        "y": 100,
        "wires": [
            [
                "062fe62dd1be1beb"
            ]
        ]
    },
    {
        "id": "1999f6ed94cc5654",
        "type": "ui_date_picker",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "End date",
        "label": "End",
        "group": "bbd948ee4eae4c1f",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 560,
        "y": 140,
        "wires": [
            [
                "b03ba45cdfbfdbf5"
            ]
        ]
    },
    {
        "id": "437b0fafb4ee7953",
        "type": "ui_dropdown",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "",
        "label": "Alarm Type",
        "tooltip": "Select an alarm type to filter the results",
        "place": "Select option",
        "group": "bbd948ee4eae4c1f",
        "order": 4,
        "width": 8,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All alarms",
                "value": "all_alarms",
                "type": "str"
            },
            {
                "label": "Overvoltage",
                "value": "overvoltage",
                "type": "str"
            },
            {
                "label": "Undervoltage",
                "value": "undervoltage",
                "type": "str"
            },
            {
                "label": "Overcurrent",
                "value": "overcurrent",
                "type": "str"
            },
            {
                "label": "Overconsumption",
                "value": "overconsumption",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "8ad5126ea098aa6b"
            ]
        ]
    },
    {
        "id": "8ad5126ea098aa6b",
        "type": "change",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alarm_type",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f0a4f6fb14284a77",
        "type": "ui_table",
        "z": "1f43a42441b6f63c",
        "g": "ed44ad4eca26127a",
        "group": "f1fa4b428c2f1cf0",
        "name": "Alarm historic",
        "order": 1,
        "width": 12,
        "height": 12,
        "columns": [
            {
                "field": "datetime",
                "title": "Date",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "alarmtype",
                "title": "Alarm",
                "width": "150",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "threshold",
                "title": "Threshold",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "5bdee2bf7accab06",
        "type": "sqlite",
        "z": "1f43a42441b6f63c",
        "g": "ed44ad4eca26127a",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 500,
        "y": 320,
        "wires": [
            [
                "f0a4f6fb14284a77"
            ]
        ]
    },
    {
        "id": "ca20930cea3a7794",
        "type": "ui_button",
        "z": "1f43a42441b6f63c",
        "g": "ed44ad4eca26127a",
        "name": "Update table",
        "group": "bbd948ee4eae4c1f",
        "order": 3,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "fdb140d30ed5aac8"
            ]
        ]
    },
    {
        "id": "7b5c32ee96921408",
        "type": "inject",
        "z": "1f43a42441b6f63c",
        "g": "ed44ad4eca26127a",
        "name": "Update table",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "fdb140d30ed5aac8"
            ]
        ]
    },
    {
        "id": "d48e44cf902f9555",
        "type": "function",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "Now (GTM-3)",
        "func": "let now = new Date();\n\n// Create a new Date adjusted to GMT-3\nlet gmt3Time = new Date(now.getTime() - 3 * 60 * 60 * 1000);\n\n// Extract components in UTC (since we shifted manually)\nlet yyyy = gmt3Time.getUTCFullYear();\nlet mm = String(gmt3Time.getUTCMonth() + 1).padStart(2, '0');\nlet dd = String(gmt3Time.getUTCDate()).padStart(2, '0');\nlet hh = String(gmt3Time.getUTCHours()).padStart(2, '0');\nlet min = String(gmt3Time.getUTCMinutes()).padStart(2, '0');\nlet ss = String(gmt3Time.getUTCSeconds()).padStart(2, '0');\nlet ms = String(gmt3Time.getUTCMilliseconds()).padStart(3, '0');\n\n// Build ISO-like string with fixed GMT-3 offset (no 'Z' because it's not UTC)\nmsg.payload = `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}.${ms}-03:00`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            [
                "1999f6ed94cc5654"
            ]
        ]
    },
    {
        "id": "ed4bf82fbaebbc6a",
        "type": "function",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "One Week Ago (GTM-3)",
        "func": "let now = new Date();\n\n// Subtract 7 days (in ms)\nlet oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n// Adjust to GMT-3 by subtracting 3 hours\nlet gmt3Time = new Date(oneWeekAgo.getTime() - 3 * 60 * 60 * 1000);\n\n// Extract components in UTC (after manual shift)\nlet yyyy = gmt3Time.getUTCFullYear();\nlet mm = String(gmt3Time.getUTCMonth() + 1).padStart(2, '0');\nlet dd = String(gmt3Time.getUTCDate()).padStart(2, '0');\nlet hh = String(gmt3Time.getUTCHours()).padStart(2, '0');\nlet min = String(gmt3Time.getUTCMinutes()).padStart(2, '0');\nlet ss = String(gmt3Time.getUTCSeconds()).padStart(2, '0');\nlet ms = String(gmt3Time.getUTCMilliseconds()).padStart(3, '0');\n\n// Final ISO-like string with GMT-3 offset\nmsg.payload = `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}.${ms}-03:00`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "275500053bf46980"
            ]
        ]
    },
    {
        "id": "062fe62dd1be1beb",
        "type": "function",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "Format GTM-3",
        "func": "// Get the timestamp from the incoming message\nlet timestamp = msg.payload;\n\n// Convert to Date object\nlet date = new Date(timestamp);\n\n// Alternatively, use local string:\nlet localString = date.toLocaleString(); // e.g., \"6/8/2025, 2:30:00 PM\"\n\nflow.set(\"datetime_start\", localString);\n// msg.payload = localString;\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b03ba45cdfbfdbf5",
        "type": "function",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "Format GTM-3",
        "func": "// Get the timestamp from the incoming message\nlet timestamp = msg.payload;\n\n// Convert to Date object\nlet date = new Date(timestamp);\n\n// Alternatively, use local string:\nlet localString = date.toLocaleString(); // e.g., \"6/8/2025, 2:30:00 PM\"\n\nflow.set(\"datetime_end\", localString);\n// msg.payload = localString;\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "fdb140d30ed5aac8",
        "type": "function",
        "z": "1f43a42441b6f63c",
        "g": "ed44ad4eca26127a",
        "name": "Query",
        "func": "// Parse \"DD/MM/YYYY, HH:mm:ss\"\nfunction parseCustomDate(str) {\n    const [datePart, timePart] = str.split(', ');\n    const [day, month, year] = datePart.split('/').map(Number);\n    const [hours, minutes, seconds] = timePart.split(':').map(Number);\n    return new Date(year, month - 1, day, hours, minutes, seconds);\n}\n\n// Format date to \"YYYY-MM-DD HH:mm:ss\"\nfunction toSQLDatetime(date) {\n    const pad = (n) => n.toString().padStart(2, '0');\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n}\n\nlet startTs = flow.get('datetime_start'); \nlet endTs = flow.get('datetime_end');     \nlet alarmType = flow.get('alarm_type') || \"all_alarms\";\n\nconst startTime = parseCustomDate(startTs);\nstartTime.setHours(0, 0, 0, 0);\nconst endTime = parseCustomDate(endTs);\nendTime.setHours(23, 59, 59, 999);\n\nconst startStr = toSQLDatetime(startTime);\nconst endStr = toSQLDatetime(endTime);\n\nlet query = `\n  SELECT * FROM db_alarm_historic \n  WHERE datetime BETWEEN '${startStr}' AND '${endStr}'\n`;\n\nif (alarmType && alarmType.trim() !== 'all_alarms') {\n  query += ` AND alarmtype = '${alarmType.replace(/'/g, \"''\")}'`;\n}\n\nquery += ` ORDER BY datetime DESC;`;\n\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            [
                "5bdee2bf7accab06"
            ]
        ]
    },
    {
        "id": "bd1d730eeead1b13",
        "type": "inject",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "Update",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "ed4bf82fbaebbc6a",
                "d48e44cf902f9555"
            ]
        ]
    },
    {
        "id": "eae5919fba2cb6c2",
        "type": "inject",
        "z": "1f43a42441b6f63c",
        "g": "4aeb419092df88b3",
        "name": "Update",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "all_alarms",
        "payloadType": "str",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "437b0fafb4ee7953"
            ]
        ]
    },
    {
        "id": "a10d6a22eaf41d85",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Check Voltage Alarms",
        "func": "if (global.get('overvoltage_alarm') == true && msg.voltage > global.get('overvoltage_ths')){\n    // Reinicio de alarma\n    if (flow.get('t_overvoltage')  != -1 && Date.now() - flow.get('t_overvoltage') < global.get('alarm_cooldown')){\n        return null;\n    }       \n    //flow.set('f_overvoltage', true);\n    flow.set('t_overvoltage', Date.now());\n\n    let newMsg = {\n        alarm_data: {\n            // Notificaction\n            alert: \"SOBRETENSIÓN!\",\n            notification_msg: \"Se detectó un valor de tensión de \" + msg.voltage + \"V\",\n            // Info\n            alarm: \"overvoltage\",\n            value: msg.voltage,\n            threshold: global.get('overvoltage_ths'),\n            unit: \"V\",\n            time: msg.datetime,\n        },\n        __msgid__: msg._msgid,\n    };\n\n    return newMsg;\n}\n\nif (global.get('undervoltage_alarm') == true && msg.voltage < global.get('undervoltage_ths')){\n    // Reinicio de alarma\n    if (flow.get('t_undervoltage') != -1 && Date.now() - flow.get('t_undervoltage') < global.get('alarm_cooldown')) {\n        return null;\n    }\n    // flow.set('f_undervoltage', true);\n    flow.set('t_undervoltage', Date.now());\n\n    let newMsg = {\n        alarm_data: {\n            // Notificaction\n            alert: \"CAÍDA DE TENSIÓN!\",\n            notification_msg: \"Se detectó un valor de tensión de \" +  msg.voltage + \"V\",\n            // Info\n            alarm: \"undervoltage\",\n            value: msg.voltage,\n            threshold: global.get('undervoltage_ths'),\n            unit: \"V\",\n            time: msg.datetime,\n        },\n        __msgid__: msg._msgid,\n    };\n    \n    return newMsg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('t_overvoltage', -1);\nflow.set('t_undervoltage', -1);",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1720,
        "wires": [
            [
                "49f987bfacb35dab"
            ]
        ]
    },
    {
        "id": "9beed1aa2194674b",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Enable 1",
        "group": "b56f97102bf0afad",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Enable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "01aa74f3312d6a52",
                "c497d63524ee58ad",
                "62a4b6779751e9d3"
            ]
        ]
    },
    {
        "id": "411dc7f38c14a2e4",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Disable 1",
        "group": "b56f97102bf0afad",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Disable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 520,
        "wires": [
            [
                "167ef4670e9d9fc1",
                "21ece2c880e16c30",
                "62a4b6779751e9d3"
            ]
        ]
    },
    {
        "id": "01aa74f3312d6a52",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 400,
        "wires": [
            [
                "411dc7f38c14a2e4"
            ]
        ]
    },
    {
        "id": "c497d63524ee58ad",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 400,
        "wires": [
            [
                "9beed1aa2194674b"
            ]
        ]
    },
    {
        "id": "ea12c701471b3a3f",
        "type": "ui_led",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "order": 6,
        "group": "b56f97102bf0afad",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Overvotage Alarm",
        "x": 930,
        "y": 460,
        "wires": []
    },
    {
        "id": "167ef4670e9d9fc1",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 520,
        "wires": [
            [
                "9beed1aa2194674b"
            ]
        ]
    },
    {
        "id": "21ece2c880e16c30",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 520,
        "wires": [
            [
                "411dc7f38c14a2e4"
            ]
        ]
    },
    {
        "id": "ff79ce1ed4bbfa3c",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Enable 2",
        "group": "b56f97102bf0afad",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Enable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 620,
        "wires": [
            [
                "758a84efe9a8f665",
                "4d8795e6a4c80cc2",
                "fd32d8e79fe71e0e"
            ]
        ]
    },
    {
        "id": "16632e81b89ee699",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Disable 2",
        "group": "b56f97102bf0afad",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Disable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 740,
        "wires": [
            [
                "54cb53387b06207a",
                "48b89a2cba4efde4",
                "fd32d8e79fe71e0e"
            ]
        ]
    },
    {
        "id": "758a84efe9a8f665",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 620,
        "wires": [
            [
                "16632e81b89ee699"
            ]
        ]
    },
    {
        "id": "4d8795e6a4c80cc2",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 620,
        "wires": [
            [
                "ff79ce1ed4bbfa3c"
            ]
        ]
    },
    {
        "id": "0bcb0ed45c8d2664",
        "type": "ui_led",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "order": 9,
        "group": "b56f97102bf0afad",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Undervoltage Alarm",
        "x": 940,
        "y": 680,
        "wires": []
    },
    {
        "id": "54cb53387b06207a",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 740,
        "wires": [
            [
                "ff79ce1ed4bbfa3c"
            ]
        ]
    },
    {
        "id": "48b89a2cba4efde4",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 740,
        "wires": [
            [
                "16632e81b89ee699"
            ]
        ]
    },
    {
        "id": "df353a5c39172caf",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Enable 3",
        "group": "b56f97102bf0afad",
        "order": 25,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Enable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 840,
        "wires": [
            [
                "646922c8c97bec7f",
                "36377791ae9c719e",
                "c4bc6f3f7d6b3120"
            ]
        ]
    },
    {
        "id": "a88bf7e7ac37823c",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Disable 3",
        "group": "b56f97102bf0afad",
        "order": 26,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Disable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 960,
        "wires": [
            [
                "fed3fcfa987b1b03",
                "c91cdae5cf1fb728",
                "c4bc6f3f7d6b3120"
            ]
        ]
    },
    {
        "id": "646922c8c97bec7f",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 840,
        "wires": [
            [
                "a88bf7e7ac37823c"
            ]
        ]
    },
    {
        "id": "36377791ae9c719e",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 840,
        "wires": [
            [
                "df353a5c39172caf"
            ]
        ]
    },
    {
        "id": "f51133c7d7d9e5f4",
        "type": "ui_led",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "order": 21,
        "group": "b56f97102bf0afad",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Overcurrent Alarm",
        "x": 930,
        "y": 900,
        "wires": []
    },
    {
        "id": "fed3fcfa987b1b03",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 960,
        "wires": [
            [
                "df353a5c39172caf"
            ]
        ]
    },
    {
        "id": "c91cdae5cf1fb728",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 960,
        "wires": [
            [
                "a88bf7e7ac37823c"
            ]
        ]
    },
    {
        "id": "52111ee3d62b7569",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Enable 4",
        "group": "b56f97102bf0afad",
        "order": 28,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Enable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 1060,
        "wires": [
            [
                "053e8743baec8a94",
                "1760f6cd248976d5",
                "67ea2498effaed84"
            ]
        ]
    },
    {
        "id": "c3aeb147bf96a227",
        "type": "ui_button",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Disable 4",
        "group": "b56f97102bf0afad",
        "order": 29,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Disable",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "settings",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "87692cc1b3629f22",
                "3e522c8921c0ee58",
                "67ea2498effaed84"
            ]
        ]
    },
    {
        "id": "053e8743baec8a94",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "c3aeb147bf96a227"
            ]
        ]
    },
    {
        "id": "1760f6cd248976d5",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "52111ee3d62b7569"
            ]
        ]
    },
    {
        "id": "3d00bddfcd6a745c",
        "type": "ui_led",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "order": 24,
        "group": "b56f97102bf0afad",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Overcomsuption Alarm",
        "x": 940,
        "y": 1120,
        "wires": []
    },
    {
        "id": "87692cc1b3629f22",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Enable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "52111ee3d62b7569"
            ]
        ]
    },
    {
        "id": "3e522c8921c0ee58",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Disable button",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "c3aeb147bf96a227"
            ]
        ]
    },
    {
        "id": "6fc32d3239ab4da3",
        "type": "ui_text_input",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Min Voltage Value",
        "label": "Undervoltage threshold [V]",
        "tooltip": "",
        "group": "b56f97102bf0afad",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 210,
        "y": 1380,
        "wires": [
            [
                "c7336fa80764f71c",
                "9638751ead0f8f73"
            ]
        ]
    },
    {
        "id": "0426487f4ccf5b18",
        "type": "ui_text_input",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Max Voltage Value",
        "label": "Overvoltage threshold [V]",
        "tooltip": "",
        "group": "b56f97102bf0afad",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 210,
        "y": 1300,
        "wires": [
            [
                "f5153970f7d46048",
                "9638751ead0f8f73"
            ]
        ]
    },
    {
        "id": "07b95302d95ea1ba",
        "type": "ui_text_input",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Max Current Value",
        "label": "Overcurrent threshold [A]",
        "tooltip": "",
        "group": "b56f97102bf0afad",
        "order": 20,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 210,
        "y": 1460,
        "wires": [
            [
                "4e8b176d29e77ba5",
                "9638751ead0f8f73"
            ]
        ]
    },
    {
        "id": "e1e9d493f4a18e24",
        "type": "ui_text_input",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Max Active Power Value",
        "label": "Overconsumption threshold [W]",
        "tooltip": "",
        "group": "b56f97102bf0afad",
        "order": 23,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 230,
        "y": 1540,
        "wires": [
            [
                "e17627c9227f928e",
                "9638751ead0f8f73"
            ]
        ]
    },
    {
        "id": "c7336fa80764f71c",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Set global var",
        "rules": [
            {
                "t": "set",
                "p": "undervoltage_ths",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "4e8b176d29e77ba5",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Set global var",
        "rules": [
            {
                "t": "set",
                "p": "overcurrent_ths",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "e17627c9227f928e",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Set global var",
        "rules": [
            {
                "t": "set",
                "p": "overconsumption_ths",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "9638751ead0f8f73",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Update Alarms Thresholds DB",
        "func": "var ths_name = msg.topic;\nvar ths_value = msg.payload;\n\nmsg.topic = `\n    UPDATE db_alarm_settings \n    SET value = ${ths_value} \n    WHERE key = '${ths_name}';\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1420,
        "wires": [
            [
                "dbcc77638fa8f7ff"
            ]
        ]
    },
    {
        "id": "62a4b6779751e9d3",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Activate alarm",
        "rules": [
            {
                "t": "set",
                "p": "overvoltage_alarm",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "overvoltage",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "enabled",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 460,
        "wires": [
            [
                "ea12c701471b3a3f",
                "15bba15c2ec7944c"
            ]
        ]
    },
    {
        "id": "fd32d8e79fe71e0e",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Activate alarm",
        "rules": [
            {
                "t": "set",
                "p": "undervoltage_alarm",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "undervoltage",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "enabled",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 680,
        "wires": [
            [
                "0bcb0ed45c8d2664",
                "3c681ca6b4561a74"
            ]
        ]
    },
    {
        "id": "c4bc6f3f7d6b3120",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Activate alarm",
        "rules": [
            {
                "t": "set",
                "p": "overcurrent_alarm",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "overcurrent",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "enabled",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 900,
        "wires": [
            [
                "f51133c7d7d9e5f4",
                "ff9e91a5d091186f"
            ]
        ]
    },
    {
        "id": "67ea2498effaed84",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Activate alarm",
        "rules": [
            {
                "t": "set",
                "p": "overconsumption_alarm",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "overconsumption",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "enabled",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1120,
        "wires": [
            [
                "3d00bddfcd6a745c",
                "d344d82b093adf16"
            ]
        ]
    },
    {
        "id": "22247cf719379c4c",
        "type": "ui_text",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "group": "b56f97102bf0afad",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "Description 1",
        "label": "",
        "format": "Overvoltage Alarm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 420,
        "wires": []
    },
    {
        "id": "c228f0505765199f",
        "type": "ui_text",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "group": "b56f97102bf0afad",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Description 2",
        "label": "",
        "format": "Undervoltage Alarm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 640,
        "wires": []
    },
    {
        "id": "ff454f680eb9e5ac",
        "type": "ui_text",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "group": "b56f97102bf0afad",
        "order": 16,
        "width": 6,
        "height": 1,
        "name": "Description 3",
        "label": "",
        "format": "Overcurrent Alarm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 860,
        "wires": []
    },
    {
        "id": "e69e6066980b15e7",
        "type": "ui_text",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "group": "b56f97102bf0afad",
        "order": 18,
        "width": 6,
        "height": 1,
        "name": "Description 4",
        "label": "",
        "format": "Overconsumption Alarm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 1080,
        "wires": []
    },
    {
        "id": "473a76b058a905f6",
        "type": "e-mail",
        "z": "999bc0a47d0df7f6",
        "g": "b191d481f7cd8b4a",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "Send Email",
        "x": 850,
        "y": 2300,
        "wires": []
    },
    {
        "id": "2b9c257870e2496e",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "b191d481f7cd8b4a",
        "name": "Alarm Info In",
        "links": [
            "bdf46ed83973910b",
            "ea7daa7b6dfa439c"
        ],
        "x": 55,
        "y": 2300,
        "wires": [
            [
                "b64aeb96ae8f9fd2"
            ]
        ]
    },
    {
        "id": "dbcc77638fa8f7ff",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Update ths into DB",
        "mode": "link",
        "links": [
            "0e790badd828e6a0"
        ],
        "x": 715,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d35f9e07f9b786bf",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "372d6a6ba94b0d06",
        "name": "Update Alarms State DB",
        "func": "var ths_name = msg.topic;\nvar ths_state = msg.payload;\n\nmsg.topic = `\n    UPDATE db_alarm_settings \n    SET state = ${ths_state} \n    WHERE key = '${ths_name}';\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 800,
        "wires": [
            [
                "adcfde493a44c574"
            ]
        ]
    },
    {
        "id": "13f41426b533b5e0",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "372d6a6ba94b0d06",
        "name": "SQL update alarm state",
        "links": [
            "15bba15c2ec7944c",
            "3c681ca6b4561a74",
            "ff9e91a5d091186f",
            "d344d82b093adf16"
        ],
        "x": 1215,
        "y": 800,
        "wires": [
            [
                "d35f9e07f9b786bf"
            ]
        ]
    },
    {
        "id": "adcfde493a44c574",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "372d6a6ba94b0d06",
        "name": "Update state into DB",
        "mode": "link",
        "links": [
            "0e790badd828e6a0"
        ],
        "x": 1535,
        "y": 800,
        "wires": []
    },
    {
        "id": "15bba15c2ec7944c",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Overvoltage alarm state",
        "mode": "link",
        "links": [
            "13f41426b533b5e0"
        ],
        "x": 855,
        "y": 500,
        "wires": []
    },
    {
        "id": "3c681ca6b4561a74",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Undervoltage alarm state",
        "mode": "link",
        "links": [
            "13f41426b533b5e0"
        ],
        "x": 855,
        "y": 720,
        "wires": []
    },
    {
        "id": "ff9e91a5d091186f",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Overcurrent alarm state",
        "mode": "link",
        "links": [
            "13f41426b533b5e0"
        ],
        "x": 855,
        "y": 940,
        "wires": []
    },
    {
        "id": "d344d82b093adf16",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Overconsumption alarm state",
        "mode": "link",
        "links": [
            "13f41426b533b5e0"
        ],
        "x": 855,
        "y": 1160,
        "wires": []
    },
    {
        "id": "148199254e0cc55e",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Overvoltage alarm settings",
        "links": [
            "4688cb13219dbd40",
            "f2a8eb7241d24f90"
        ],
        "x": 55,
        "y": 1300,
        "wires": [
            [
                "0426487f4ccf5b18",
                "f5153970f7d46048"
            ]
        ]
    },
    {
        "id": "fddb374c7fe31434",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Undervoltage alarm settings",
        "links": [
            "a4b2bc47e8e0af15",
            "e256c4df31739493"
        ],
        "x": 55,
        "y": 1380,
        "wires": [
            [
                "6fc32d3239ab4da3",
                "c7336fa80764f71c"
            ]
        ]
    },
    {
        "id": "2559e8c84910d219",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Overcurrent alarm settings",
        "links": [
            "d2d00b980929e9bc",
            "ffa3bfe70d422ecc"
        ],
        "x": 55,
        "y": 1460,
        "wires": [
            [
                "07b95302d95ea1ba",
                "4e8b176d29e77ba5"
            ]
        ]
    },
    {
        "id": "1850ef5565c7435a",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Overconsumption alarm settings",
        "links": [
            "9d16cffe2c80db08"
        ],
        "x": 55,
        "y": 1540,
        "wires": [
            [
                "e1e9d493f4a18e24",
                "e17627c9227f928e"
            ]
        ]
    },
    {
        "id": "a7d3afeeaa62f101",
        "type": "inject",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Get alarm settings",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM db_alarm_settings;",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "a7166432024eefbd"
            ]
        ]
    },
    {
        "id": "a7166432024eefbd",
        "type": "sqlite",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "63444506723e8328"
            ]
        ]
    },
    {
        "id": "63444506723e8328",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Data conversion",
        "func": "var query_result = msg.payload;\nvar dict = {};\n\nlet messages = [];\n\n// Iterar sobre cada fila del query_result\nfor (var i = 0; i < query_result.length; i++) {\n    var alarm = query_result[i];\n\n    messages.push({\n        topic : alarm.key,\n        payload : {\n           value : alarm.value,\n           state : Boolean(alarm.state),\n        }\n    });\n}\n\nreturn [[...messages]];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "3b85289612278ea2",
                "18a752b213e2dd5e"
            ]
        ]
    },
    {
        "id": "71799f604656576d",
        "type": "switch",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "overvoltage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "undervoltage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "overcurrent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "overconsumption",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 770,
        "y": 100,
        "wires": [
            [
                "4688cb13219dbd40"
            ],
            [
                "a4b2bc47e8e0af15"
            ],
            [
                "d2d00b980929e9bc"
            ],
            [
                "9d16cffe2c80db08"
            ]
        ]
    },
    {
        "id": "4688cb13219dbd40",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Overvoltage alarm settings",
        "mode": "link",
        "links": [
            "148199254e0cc55e"
        ],
        "x": 855,
        "y": 60,
        "wires": []
    },
    {
        "id": "a4b2bc47e8e0af15",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Undervoltage alarm settings",
        "mode": "link",
        "links": [
            "fddb374c7fe31434"
        ],
        "x": 895,
        "y": 80,
        "wires": []
    },
    {
        "id": "d2d00b980929e9bc",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Overcurrent alarm settings",
        "mode": "link",
        "links": [
            "2559e8c84910d219"
        ],
        "x": 895,
        "y": 120,
        "wires": []
    },
    {
        "id": "9d16cffe2c80db08",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Overconsumption alarm settings",
        "mode": "link",
        "links": [
            "1850ef5565c7435a"
        ],
        "x": 855,
        "y": 140,
        "wires": []
    },
    {
        "id": "f5153970f7d46048",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "2fbd0fbd8f990790",
        "name": "Set global var",
        "rules": [
            {
                "t": "set",
                "p": "overvoltage_ths",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "3b85289612278ea2",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Get alarms values",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "71799f604656576d"
            ]
        ]
    },
    {
        "id": "18a752b213e2dd5e",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Get alarm states",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload.state",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.state",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "b2e18e49460b8ac6"
            ]
        ]
    },
    {
        "id": "b2e18e49460b8ac6",
        "type": "switch",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "overvoltage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "undervoltage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "overcurrent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "overconsumption",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "5bbaa5c1f913bf1b"
            ],
            [
                "54d1cee1061e74a1"
            ],
            [
                "ac9070e265e95f8b"
            ],
            [
                "743c83d183a56b65"
            ]
        ]
    },
    {
        "id": "5bbaa5c1f913bf1b",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Overvoltage alarm state setting",
        "mode": "link",
        "links": [
            "2c22627b96fd09ca"
        ],
        "x": 855,
        "y": 180,
        "wires": []
    },
    {
        "id": "2c22627b96fd09ca",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "Overvoltage alarm state setting",
        "links": [
            "5bbaa5c1f913bf1b"
        ],
        "x": 55,
        "y": 460,
        "wires": [
            [
                "62a4b6779751e9d3",
                "2dc60a325032678c",
                "411dc7f38c14a2e4"
            ]
        ]
    },
    {
        "id": "2dc60a325032678c",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "f8b20ae8640a9fc1",
        "name": "NOT enabled",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$not(msg.enabled)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 440,
        "wires": [
            [
                "9beed1aa2194674b"
            ]
        ]
    },
    {
        "id": "54d1cee1061e74a1",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Undervoltage alarm state setting",
        "mode": "link",
        "links": [
            "9ca28d6980876470"
        ],
        "x": 895,
        "y": 200,
        "wires": []
    },
    {
        "id": "ac9070e265e95f8b",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Overcurrent alarm state setting",
        "mode": "link",
        "links": [
            "d4d24181f42a8280"
        ],
        "x": 895,
        "y": 240,
        "wires": []
    },
    {
        "id": "743c83d183a56b65",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "1d5a30a49e64d027",
        "name": "Overconsumption alarm state setting",
        "mode": "link",
        "links": [
            "0cd17987b9c70caf"
        ],
        "x": 855,
        "y": 260,
        "wires": []
    },
    {
        "id": "9ca28d6980876470",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "Undervoltage alarm state setting",
        "links": [
            "54d1cee1061e74a1"
        ],
        "x": 55,
        "y": 680,
        "wires": [
            [
                "46895f724a52fe88",
                "16632e81b89ee699",
                "fd32d8e79fe71e0e"
            ]
        ]
    },
    {
        "id": "46895f724a52fe88",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b90b2cc6f056d966",
        "name": "NOT enabled",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$not(msg.enabled)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 660,
        "wires": [
            [
                "ff79ce1ed4bbfa3c"
            ]
        ]
    },
    {
        "id": "d4d24181f42a8280",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "Overcurrent alarm state setting",
        "links": [
            "ac9070e265e95f8b"
        ],
        "x": 55,
        "y": 900,
        "wires": [
            [
                "f19fe9df90aa9314",
                "a88bf7e7ac37823c",
                "c4bc6f3f7d6b3120"
            ]
        ]
    },
    {
        "id": "f19fe9df90aa9314",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "19e98ffbd0844fc9",
        "name": "NOT enabled",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$not(msg.enabled)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 880,
        "wires": [
            [
                "df353a5c39172caf"
            ]
        ]
    },
    {
        "id": "0cd17987b9c70caf",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "Overconsumption alarm state setting",
        "links": [
            "743c83d183a56b65"
        ],
        "x": 55,
        "y": 1120,
        "wires": [
            [
                "70bbde10e4faa7d9",
                "c3aeb147bf96a227",
                "67ea2498effaed84"
            ]
        ]
    },
    {
        "id": "70bbde10e4faa7d9",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b6295e28d8b86c52",
        "name": "NOT enabled",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$not(msg.enabled)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 1100,
        "wires": [
            [
                "52111ee3d62b7569"
            ]
        ]
    },
    {
        "id": "b64aeb96ae8f9fd2",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "b191d481f7cd8b4a",
        "name": "SQL Query",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT email FROM db_mailing_list;",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "c8cf8966b029e018"
            ]
        ]
    },
    {
        "id": "c8cf8966b029e018",
        "type": "sqlite",
        "z": "999bc0a47d0df7f6",
        "g": "b191d481f7cd8b4a",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 340,
        "y": 2300,
        "wires": [
            [
                "5ad943333ba368e8"
            ]
        ]
    },
    {
        "id": "db6f0f0277716231",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Check Current Alarms",
        "func": "if(global.get('overcurrent_alarm') == false){\n    return null;\n} \n\nif(msg.value > global.get('overcurrent_ths')){\n    // Reinicio de alarma\n    if (flow.get('t_overcurrent') != -1 && Date.now() - flow.get('t_overcurrent') < global.get('alarm_cooldown')){\n        return null;\n    }       \n    //flow.set('f_overcurrent', true);\n    flow.set('t_overcurrent', Date.now());\n    \n    let newMsg = {\n        alarm_data: {\n            // Notificaction\n            alert: \"SOBRECORRIENTE!\",\n            notification_msg: \"Se detectó un pico de corriente de \" + msg.current + \"A\",\n            // Info\n            alarm: \"overcurrent\",\n            value: msg.current,\n            threshold: global.get('overcurrent_ths'),\n            unit: \"A\",\n            time: msg.datetime,\n        },\n        __msgid__: msg._msgid,\n    };\n\n    return newMsg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('t_overcurrent', -1);",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1760,
        "wires": [
            [
                "49f987bfacb35dab"
            ]
        ]
    },
    {
        "id": "84d32fe5ee201877",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Check ActivePower Alarms",
        "func": "// Alarma desactivada ==> no controla nada\nif (global.get('overconsumption_alarm') == false) {\n    return;\n}\n\nif (msg.active_power < global.get('overconsumption_ths')) {\n    \n    // Valor menor al threshold por primera\n    if (flow.get('ap_alarm_down_flag') == false) {\n        flow.set('ap_alarm_down_flag', true);\n        flow.set('ap_alarm_down_timer', Date.now());\n        return;\n    }\n\n    // Valor menor al threshold por al menos 1 min ==> se desactiva la alarma\n    if (flow.get('ap_alarm_flag') == true && Date.now() - flow.get('ap_alarm_down_timer') > 60000) {\n        flow.set('ap_alarm_flag', false);\n        return;\n    }\n\n    return;\n}\n\n// Valor superior al threshold por primera vez\nif (flow.get('ap_alarm_flag') == false) {\n    flow.set('ap_alarm_flag', true);\n    flow.set('ap_alarm_down_flag', false);\n    flow.set('ap_alarm_timer', Date.now());\n    return;\n}\n\n// Valor superior al threshold por más del tiempo permitido ==> se activa la alarma\nif (flow.get('ap_alarm_flag') == true && Date.now() - flow.get('ap_alarm_timer') > flow.get('active_power_time_ths')){\n    flow.set('ap_alarm_flag', false);\n    \n    let newMsg = {\n        alarm_data: {\n            // Notificaction\n            alert: \"EXCESO DE CONSUMO!\",\n            notification_msg: \"Se detectó un consumo de \" + msg.active_power + \"W\",\n            // Info\n            alarm: \"overconsumption\",\n            value: msg.active_power,\n            threshold: global.get('overconsumption_ths'),\n            unit: \"W\",\n            time: msg.datetime,\n        },\n        __msgid__: msg._msgid,\n    };\n    \n    return newMsg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('ap_alarm_flag', false);\nflow.set('ap_alarm_down_flag', true);",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1800,
        "wires": [
            [
                "49f987bfacb35dab"
            ]
        ]
    },
    {
        "id": "49f987bfacb35dab",
        "type": "delay",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 1760,
        "wires": [
            [
                "1de45397763731e3",
                "7433e8168f2576ab",
                "ea7daa7b6dfa439c"
            ]
        ]
    },
    {
        "id": "c175c8ce19cfd98d",
        "type": "comment",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Falta avisar si no se detecta más el dispositivo, es decir, se cae el MQTT",
        "info": "",
        "x": 540,
        "y": 1840,
        "wires": []
    },
    {
        "id": "3cb950e6de8d7af7",
        "type": "ui_numeric",
        "z": "999bc0a47d0df7f6",
        "g": "8951563d9636cbc7",
        "name": "Alarm Cooldown",
        "label": "[minutes]",
        "tooltip": "",
        "group": "39050940b9ad40f4",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1",
        "max": "30",
        "step": 1,
        "className": "",
        "x": 520,
        "y": 2020,
        "wires": [
            [
                "e69b68ce76a467cd"
            ]
        ]
    },
    {
        "id": "cb11038b5e13ec62",
        "type": "ui_text",
        "z": "999bc0a47d0df7f6",
        "g": "8951563d9636cbc7",
        "group": "39050940b9ad40f4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Description 1",
        "label": "",
        "format": "Alarm cooldown",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 530,
        "y": 1980,
        "wires": []
    },
    {
        "id": "39262c5f0ed362c6",
        "type": "ui_numeric",
        "z": "999bc0a47d0df7f6",
        "g": "17df376e8b411382",
        "name": "ActivePower Time THS",
        "label": "[minutes]",
        "tooltip": "",
        "group": "39050940b9ad40f4",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1",
        "max": "30",
        "step": 1,
        "className": "",
        "x": 590,
        "y": 2160,
        "wires": [
            [
                "a03a27bf7979cb5d"
            ]
        ]
    },
    {
        "id": "193d85ec0623b985",
        "type": "ui_text",
        "z": "999bc0a47d0df7f6",
        "g": "17df376e8b411382",
        "group": "39050940b9ad40f4",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Description 2",
        "label": "",
        "format": "Time limit before overconsumption alarm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 590,
        "y": 2120,
        "wires": []
    },
    {
        "id": "04f0d584c06ab2cf",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "MQTT Data",
        "links": [
            "eb7e0a26a78ab06a"
        ],
        "x": 205,
        "y": 1720,
        "wires": [
            [
                "a10d6a22eaf41d85",
                "db6f0f0277716231",
                "84d32fe5ee201877"
            ]
        ]
    },
    {
        "id": "a03a27bf7979cb5d",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "17df376e8b411382",
        "name": "Save overconsumption time ths",
        "func": "flow.set('active_power_time_ths', msg.payload * 60000); // stored on disk",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "e69b68ce76a467cd",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "8951563d9636cbc7",
        "name": "Save alarm cooldown time",
        "func": "global.set('alarm_cooldown', msg.payload * 60000); ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "3fab71b4ace5efcc",
        "type": "inject",
        "z": "999bc0a47d0df7f6",
        "g": "8951563d9636cbc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "alarm_cooldown",
        "payloadType": "global",
        "x": 170,
        "y": 2020,
        "wires": [
            [
                "178df268cb435b9a"
            ]
        ]
    },
    {
        "id": "178df268cb435b9a",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "8951563d9636cbc7",
        "name": "Format",
        "func": "msg.payload = msg.payload / 60000;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2020,
        "wires": [
            [
                "3cb950e6de8d7af7"
            ]
        ]
    },
    {
        "id": "d5f7e3f3a739697f",
        "type": "inject",
        "z": "999bc0a47d0df7f6",
        "g": "17df376e8b411382",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "active_power_time_ths",
        "payloadType": "global",
        "x": 190,
        "y": 2160,
        "wires": [
            [
                "efdf2c1c43cf7345"
            ]
        ]
    },
    {
        "id": "efdf2c1c43cf7345",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "17df376e8b411382",
        "name": "Format",
        "func": "msg.payload = msg.payload / 60000;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2160,
        "wires": [
            [
                "39262c5f0ed362c6"
            ]
        ]
    },
    {
        "id": "1de45397763731e3",
        "type": "change",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Set notification",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "alarm_data.alert",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "alarm_data.notification_msg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1720,
        "wires": [
            [
                "1a1c62b470f46324"
            ]
        ]
    },
    {
        "id": "5ad943333ba368e8",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "b191d481f7cd8b4a",
        "name": "Users emails",
        "func": "let messages = [];\n\nconst query_result = msg.payload;\nlet dict = {};\n\nlet mailSubject = \"Alerta de alarma por \" + msg.alarm_data.alert.toUpperCase();\n\n// Iterar sobre cada fila del query_result\nfor (var i = 0; i < query_result.length; i++) {        \n    let user = query_result[i];\n    \n    messages.push({\n        topic: mailSubject,\n        to: user.email,\n        alarm_data: msg.alarm_data,\n    });\n}\n\nreturn [[...messages]];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set('mail_qty', 10);",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2300,
        "wires": [
            [
                "6e65b0533267aac0"
            ]
        ]
    },
    {
        "id": "6e65b0533267aac0",
        "type": "template",
        "z": "999bc0a47d0df7f6",
        "g": "b191d481f7cd8b4a",
        "name": "Email content",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Alerta</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        .container {\n            background-color: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            max-width: 600px; \n            margin: 0 auto; \n        }\n        .header {\n            background-color: #ff4c4c;\n            color: white;\n            padding: 10px;\n            text-align: center;\n            border-radius: 8px 8px 0 0;\n        }\n        .content {\n            padding: 20px;\n            color: #333;\n            font-size: 20px;\n        }\n        .footer {\n            text-align: center;\n            font-size: 12px;\n            color: #888;\n            margin-top: 20px;\n        }\n        .alert {\n            font-weight: bold;\n            color: #ff4c4c;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>⚠️ Alerta por {{alarm_data.alert}} ⚠️</h1>\n        </div>\n        <div class=\"content\" style=\"font-family: sans-serif; line-height: 1.6;\">\n            <p>Se ha detectado una <span class=\"alert\" style=\"font-weight: bold; color: red;\">alerta por {{alarm_data.alert}}</span>.</p>\n            <p>El valor medido fue de <strong>{{alarm_data.value}}{{alarm_data.unit}}</strong>, superando el umbral establecido de <strong>{{alarm_data.threshold}}{{alarm_data.unit}}</strong>.</p>\n            <p><strong>Horario de la medición:</strong> {{alarm_data.time}}</p>\n            <p>Puede acceder a las mediciones en tiempo real mediante el <a href=\"http://192.168.1.22:1880/ui\" target=\"_blank\">siguiente enlace</a>.</p>\n        </div>\n        <div class=\"footer\">\n            <p>Este es un mensaje generado automáticamente.</p>\n        </div>\n    </div>\n</body>\n</html>\n",
        "output": "str",
        "x": 680,
        "y": 2300,
        "wires": [
            [
                "473a76b058a905f6"
            ]
        ]
    },
    {
        "id": "7433e8168f2576ab",
        "type": "function",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "SQL Insert",
        "func": "msg.topic = `\n    INSERT INTO db_alarm_historic (\n        datetime, \n        alarmtype, \n        threshold, \n        value) \n    VALUES (\n        '${msg.alarm_data.time}', \n        '${msg.alarm_data.alarm}', \n        ${msg.alarm_data.threshold}, \n        ${msg.alarm_data.value});\n    `;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1760,
        "wires": [
            [
                "6314529a303f7e63"
            ]
        ]
    },
    {
        "id": "1a1c62b470f46324",
        "type": "ui_toast",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "position": "bottom right",
        "displayTime": "5",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Alarm Notification",
        "x": 1030,
        "y": 1720,
        "wires": []
    },
    {
        "id": "6314529a303f7e63",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Insert alarm into DB",
        "mode": "link",
        "links": [
            "0e790badd828e6a0"
        ],
        "x": 935,
        "y": 1760,
        "wires": []
    },
    {
        "id": "ea7daa7b6dfa439c",
        "type": "link out",
        "z": "999bc0a47d0df7f6",
        "g": "eaea5e605a485fbb",
        "name": "Alarm Info Out",
        "mode": "link",
        "links": [
            "2b9c257870e2496e"
        ],
        "x": 775,
        "y": 1800,
        "wires": []
    },
    {
        "id": "0e790badd828e6a0",
        "type": "link in",
        "z": "999bc0a47d0df7f6",
        "g": "9996a8587542bcf9",
        "name": "SQL query DB without return",
        "links": [
            "6314529a303f7e63",
            "dbcc77638fa8f7ff",
            "adcfde493a44c574",
            "79149befeaf59fa8"
        ],
        "x": 885,
        "y": 1420,
        "wires": [
            [
                "98a6df06f042dc23"
            ]
        ]
    },
    {
        "id": "98a6df06f042dc23",
        "type": "sqlite",
        "z": "999bc0a47d0df7f6",
        "g": "9996a8587542bcf9",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 1000,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "273322c83865bde6",
        "type": "ui_form",
        "z": "482bde5f7ef38274",
        "g": "1102123cbc3891e1",
        "name": "New User",
        "label": "Añadir nuevo usuario",
        "group": "23dd2c25a12ff010",
        "order": 1,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Nombre",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Dirección de correo",
                "value": "email",
                "type": "email",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "email": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "7f7414539189a065"
            ]
        ]
    },
    {
        "id": "7f7414539189a065",
        "type": "function",
        "z": "482bde5f7ef38274",
        "g": "1102123cbc3891e1",
        "name": "SQL query",
        "func": "msg.topic = `\n    INSERT INTO db_mailing_list(\n        username, \n        email) \n    VALUES (\n        '${msg.payload.username}', \n        '${msg.payload.email}');\n    `;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "3a20b3bd99f04d16"
            ]
        ]
    },
    {
        "id": "c8625d2a5063386f",
        "type": "inject",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "name": "Update",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "e9d0bf6fe6b4e4b8"
            ]
        ]
    },
    {
        "id": "7a5ef607bed59be3",
        "type": "sqlite",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "906e5e947ee38712",
                "9330c1a537b1162c"
            ]
        ]
    },
    {
        "id": "906e5e947ee38712",
        "type": "ui_table",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "group": "1c8c4bf21adf2105",
        "name": "Users Table",
        "order": 1,
        "width": 16,
        "height": 5,
        "columns": [
            {
                "field": "username",
                "title": "User",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "email",
                "title": "Email",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 750,
        "y": 360,
        "wires": [
            [
                "18a6aa9eb50aefd9"
            ]
        ]
    },
    {
        "id": "bff8ddaba624602b",
        "type": "link in",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "name": "SQL Query Users",
        "links": [
            "f38bab9ac0e7d198",
            "c023858f7988e11b"
        ],
        "x": 185,
        "y": 360,
        "wires": [
            [
                "e9d0bf6fe6b4e4b8"
            ]
        ]
    },
    {
        "id": "e9d0bf6fe6b4e4b8",
        "type": "change",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "name": "SQL Query",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SELECT * FROM db_mailing_list;",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "7a5ef607bed59be3"
            ]
        ]
    },
    {
        "id": "df6489f2db26559e",
        "type": "sqlite",
        "z": "482bde5f7ef38274",
        "g": "2c8eda0455efa68b",
        "mydb": "102f2b0868c8e818",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "EnergyMeter DB",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "59f358c717560f2f"
            ]
        ]
    },
    {
        "id": "59f358c717560f2f",
        "type": "delay",
        "z": "482bde5f7ef38274",
        "g": "2c8eda0455efa68b",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "c023858f7988e11b"
            ]
        ]
    },
    {
        "id": "c023858f7988e11b",
        "type": "link out",
        "z": "482bde5f7ef38274",
        "g": "2c8eda0455efa68b",
        "name": "SQL Query Users",
        "mode": "link",
        "links": [
            "bff8ddaba624602b"
        ],
        "x": 515,
        "y": 80,
        "wires": []
    },
    {
        "id": "b08f8b26dea3da57",
        "type": "link in",
        "z": "482bde5f7ef38274",
        "g": "2c8eda0455efa68b",
        "name": "Update User DB",
        "links": [
            "8a837eb8e1da3067",
            "3a20b3bd99f04d16"
        ],
        "x": 75,
        "y": 80,
        "wires": [
            [
                "df6489f2db26559e"
            ]
        ]
    },
    {
        "id": "8a837eb8e1da3067",
        "type": "link out",
        "z": "482bde5f7ef38274",
        "g": "d88b4db3501fe487",
        "name": "Update User DB",
        "mode": "link",
        "links": [
            "b08f8b26dea3da57"
        ],
        "x": 675,
        "y": 480,
        "wires": []
    },
    {
        "id": "3a20b3bd99f04d16",
        "type": "link out",
        "z": "482bde5f7ef38274",
        "g": "1102123cbc3891e1",
        "name": "Update User DB",
        "mode": "link",
        "links": [
            "b08f8b26dea3da57"
        ],
        "x": 415,
        "y": 200,
        "wires": []
    },
    {
        "id": "9330c1a537b1162c",
        "type": "function",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "name": "Set Users Qty",
        "func": "var users = msg.payload;\n\nglobal.set('users_qty', users.length);\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "18a6aa9eb50aefd9",
        "type": "link out",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "name": "Delete user",
        "mode": "link",
        "links": [
            "cb7a58acec2c1a7c"
        ],
        "x": 855,
        "y": 360,
        "wires": []
    },
    {
        "id": "cb7a58acec2c1a7c",
        "type": "link in",
        "z": "482bde5f7ef38274",
        "g": "d88b4db3501fe487",
        "name": "Delete user",
        "links": [
            "18a6aa9eb50aefd9"
        ],
        "x": 75,
        "y": 480,
        "wires": [
            [
                "229644ec547cba8b"
            ]
        ]
    },
    {
        "id": "29e33daa3fb5df8d",
        "type": "ui_template",
        "z": "482bde5f7ef38274",
        "g": "036f68430478cdae",
        "group": "1c8c4bf21adf2105",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .tabulator {\n        font-size: 16px !important;\n    }\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 540,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "229644ec547cba8b",
        "type": "function",
        "z": "482bde5f7ef38274",
        "g": "d88b4db3501fe487",
        "name": "Format",
        "func": "// Get user data\nmsg.user_data = {\n    id: msg.payload.id,\n    username: msg.payload.username,\n    email: msg.payload.email, \n};\n\n// Notification popup message\nmsg.topic = \"¿Está seguro que desea eliminar al siguiente usuario?\";\nmsg.payload = `\n    <p>Usuario: ${msg.payload.username}</p>\n    <p>Email: ${msg.payload.email}</p>`; \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 480,
        "wires": [
            [
                "1ebec28e7a36f619"
            ]
        ]
    },
    {
        "id": "1ebec28e7a36f619",
        "type": "ui_toast",
        "z": "482bde5f7ef38274",
        "g": "d88b4db3501fe487",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "DELETE",
        "cancel": "CANCEL",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 370,
        "y": 480,
        "wires": [
            [
                "8c45e33dabc0b9d0"
            ]
        ]
    },
    {
        "id": "8c45e33dabc0b9d0",
        "type": "function",
        "z": "482bde5f7ef38274",
        "g": "d88b4db3501fe487",
        "name": "SQL Query",
        "func": "if (msg.payload == \"DELETE\") {\n    msg.topic = `\n        DELETE FROM db_mailing_list \n        WHERE username = '${msg.user_data.username}';\n    `;\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 480,
        "wires": [
            [
                "8a837eb8e1da3067"
            ]
        ]
    }
]